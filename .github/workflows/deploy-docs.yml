# GitHub Actions workflow for deploying Sphinx documentation to GitHub Pages and Azure Storage
name: Deploy Sphinx documentation to GitHub Pages and Azure Storage

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deploy-to-github-pages.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      # Step 3: Install Sphinx and dependencies
      - name: Install Sphinx and dependencies
        run: |
          pip install sphinx pydata-sphinx-theme sphinx-design sphinx-copybutton sphinx-autoapi
          
      # Step 4: Build Sphinx documentation
      - name: Build Sphinx documentation
        run: |
          sphinx-build docs _build
          
      # Step 5: Set up GitHub Pages
      - name: Set up GitHub Pages
        uses: actions/configure-pages@v5
        
      # Step 6: Upload artifact to GitHub Pages
      - name: Upload artifact to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_build/'
          
      # Step 7: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deploy-to-github-pages
        uses: actions/deploy-pages@v4

      # Step 8: Authenticate to Azure
      - name: Authenticate to Azure
        uses: azure/login@v1.5.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
  
      # Step 9: Deploy to Azure Storage
      - name: Deploy to Azure Storage
        run: |
          az storage blob upload-batch -d '$web' --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} -s _build --auth-mode login
